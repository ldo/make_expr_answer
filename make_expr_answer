#!/usr/bin/python3
#+
# This script studies solutions to the problem: given n positive integers, try to use any
# combination of integer addition, subtraction, multiplication and division to try to come
# up with a specified result. Besides simply listing solutions for specific cases, this
# script can also report counts of solutions satisfying various criteria. Invoke this
# script as follows:
#
#     make_expr_answer cmd args...
#
# where cmd determines what function to perform, and the exact args depend on cmd.
# Use the command
#
#     make_expr_answer help
#
# to get a list of available commands.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import fnmatch
import getopt

#+
# Miscellaneous useful stuff
#-

infinity = float("inf")

def permute(seq) :
    "generator which yields successive distinctive permutations of the elements of seq." \
    " Correctly skips duplicate permutations of duplicate elements."

    def do_permute(seq) :
        if len(seq) == 0 :
            yield ()
        else :
            prev = None
            for i in range(0, len(seq)) :
                if seq[i] != prev :
                    for rest in permute(seq[:i] + seq[i + 1:]) :
                        yield (seq[i],) + rest
                    #end for
                #end if
                prev = seq[i]
            #end for
        #end if
     #end do_permute

#begin permute
    return do_permute(sorted(seq))
#end permute

def number_combinations(n, lo = 1, hi = 9) :
    "generator which yields all possible combinations of n of the digits lo..hi." \
    " Correctly skips duplicate permutations of duplicate elements."

    def do_combine(remaining, used) :
        for i in range(max(used + (lo,)), hi + 1) :
            if remaining > 1 :
                for rest in do_combine(remaining - 1, used + (i,)) :
                    yield rest
                #end for
            else :
                yield used + (i,)
            #end if
        #end for
    #end do_combine

#begin number_combinations
    return do_combine(n, ())
#end number_combinations

def parse_range_arg(arg, lo_default = None, hi_default = None) :
    sep = ".."
    seppos = arg.find(sep)
    assert seppos >= 0, "missing separator in range arg"
    lo = arg[:seppos]
    hi = arg[seppos + len(sep):]
    if len(lo) != 0 :
        lo = int(lo)
    else :
        lo = lo_default
    #end if
    if len(hi) != 0 :
        hi = int(hi)
    else :
        hi = hi_default
    #end if
    return lo, hi
#end parse_range_arg

#+
# Expression representation and evaluation
#-

class Expr :
    "represents an expression."

    def __init__(self, op, opnds) :
        self.op = op
        if len(opnds) < 2 :
            raise RuntimeError("need at least 2 operands")
        #end if
        self.opnds = tuple(opnds)
    #end __init__

    def eval(self) :
        "returns the value of the expression as a tuple of 2 values, the second" \
        " being an indication of validity."
        result = self.op.func(self.opnds[0], self.opnds[1])
        i = 2
        while result[1] and i < len(self.opnds) :
            result = self.op.func(Num(result[0]), self.opnds[i])
            i += 1
        #end while
        return result
    #end eval

    def display(self) :
        "returns a formatted represention of the expression."
        return \
            "(" + (" %s " % self.op.display()).join(x.display() for x in self.opnds) + ")"
    #end display

#end Expr

class Num :
    "represents a single number."

    def __init__(self, val) :
        self.val = val
    #end __init__

    def eval(self) :
        "returns the value of the number as a tuple of 2 values, the second" \
        " being an indication of validity (always True)."
        return self.val, True
    #end eval

    def display(self) :
        "returns a formatted represention of the number."
        return str(self.val)
    #end display

#end Num

class Op :
    "constructs an operator."

    def __init__(self, name, func, groupable) :
        "“groupable” indicates that this operator is both commutative and associative."
        self.name = name
        self.func = func
        self.groupable = groupable
    #end __init__

    def construct(self, a, b) :
        "constructs an expression using the operator and the specified operands."

        def flatten(subexpr) :
            "if subexpr has the same operator as myself and I am groupable, returns a list of" \
            " its (recursively) extracted operands, so I can group them into single operator" \
            " instance."
            if self.groupable and isinstance(subexpr, Expr) and subexpr.op.func == self.func :
                result = []
                for opnds in flatten(subexpr.opnds) :
                    result.extend(opnds)
                #end if
            else :
                result = [subexpr]
            #end if
            return result
        #end flatten

        def canonical(expr) :
            "defines a canonical ordering for operands of a groupable operator."
            if isinstance(expr, Expr) or isinstance(expr, Num) :
                key, valid = expr.eval()
                if not valid :
                    key = 0
                #end if
                if isinstance(expr, Expr) :
                    key += 0.01 # sort literal numbers before expressions evaluating to those numbers
                #end if
            else :
                raise RuntimeError("unexpected expr type %s" % repr(type(expr)))
            #end if
            return key
        #end canonical

    #begin construct
        opnds = flatten(a) + flatten(b)
        if self.groupable :
            opnds = sorted(opnds, key = canonical)
        #end if
        return Expr(self, opnds)
    #end construct

    def display(self) :
        "returns a formatted represention of the operator applied to its operands."
        return self.name
    #end display

#end Op

def add(a, b) :
    "addition operation, always valid if operands are valid."
    a = a.eval()
    b = b.eval()
    return a[0] + b[0], a[1] and b[1]
#end add

def sub(a, b) :
    "subtraction operation, valid if operands are valid and" \
    " first operand is not less than second."
    a = a.eval()
    b = b.eval()
    return a[0] - b[0], a[1] and b[1] and a[0] >= b[0]
#end sub

def mul(a, b) :
    "addition operation, always valid if operands are valid."
    a = a.eval()
    b = b.eval()
    return a[0] * b[0], a[1] and b[1]
#end mul

def intdiv(a, b) :
    "division operation, valid if operands are valid and" \
    " second operand is not zero and first operand is exactly divisible by second."
    a = a.eval()
    b = b.eval()
    return a[0] // b[0] if b[0] != 0 else 0, a[1] and b[1] and b[0] != 0 and a[0] % b[0] == 0
#end intdiv

operators = \
    ( # list of all the valid operators
        Op("+", add, True),
        Op("-", sub, False),
        Op("×", mul, True),
        Op("÷", intdiv, False),
    )

def choose_ops(nr) :
    "generator which yields all combinations of the specified number of operators."
    if nr == 0 :
        yield ()
    else :
        for rest in choose_ops(nr - 1) :
            for op in operators :
                yield (op,) + rest
            #end for
        #end for
    #end if
#end choose_ops

def solve(numbers, target, answer) :
    "numbers is a tuple of integers to try to arrange," \
    " target is the target integer value to evaluate to," \
    " and answer is the callback to invoke with each formatted" \
    " answer line."

    def signature(expr) :
        "computes a unique identifying signature for Expr so I can spot duplicates."
        if isinstance(expr, Expr) :
            result = (expr.op.name,) + tuple(signature(opnd) for opnd in expr.opnds)
        elif isinstance(expr, Num) :
            result = (expr.val,)
        else :
            raise RuntimeError("unexpected expr type %s" % repr(type(expr)))
        #end if
        return result
    #end signature

    def iter_subexpr(numbers) :
        "iterates over all possible expressions that can be constructed from" \
        " the specified tuple of numbers in the specified order."
        if len(numbers) > 0 :
            if len(numbers) > 1 :
                for splitpoint in range(1, len(numbers)) :
                    for op in operators :
                        for operand1 in iter_subexpr(numbers[:splitpoint]) :
                            for operand2 in iter_subexpr(numbers[splitpoint:]) :
                                yield op.construct(operand1, operand2)
                            #end for
                        #end for
                    #end for
                #end for
            else :
                yield Num(numbers[0])
            #end if
        #end if
    #end iter_subexpr

#begin solve
    seen = set()
    for perm in permute(numbers) :
        for expr in iter_subexpr(perm) :
            sig = signature(expr)
            if sig not in seen :
                val, ok = expr.eval()
                if ok and val == target :
                    answer("%s = %d" % (expr.display(), target))
                #end if
                seen.add(sig)
            #end if
        #end for
    #end for
#end solve

def largest_total(numbers) :
    "returns the largest value that can come from an expression consisting of the" \
    " tuple of specified numbers."
    assert len(numbers) > 0, "no numbers!"
    numbers = sorted(numbers)
    result = 1
    if len(numbers) > 1 and numbers[0] == 1 :
        result = numbers[0] + numbers[1]
        numbers = numbers[2:]
        while len(numbers) > 0 and numbers[0] == 1 :
            result += numbers[0]
            numbers = numbers[1:]
        #end while
    #end if
    for n in numbers :
        result *= n
    #end for
    return \
        result
#end largest_total

#+
# Definitions of valid commands
#
# Each command function is passed two arguments: the first is
# the list of positional arguments, and the second is the
# dictionary of option keywords and corresponding values
# that were specified.
#-

def cmd_help(args, opts) :
    "shows the user the help description for a command, or for the help\n"
    "command itself if no valid command is given."
    command_candidates = None
    command_match = None
    if len(args) == 1 :
        cmd = args[0]
        if cmd not in recognized_commands :
            command_match = cmd
            cmd = None
            command_candidates = list \
              (
                c for c in recognized_commands.keys()
                if fnmatch.fnmatch(c, command_match)
              )
        #end if
    else :
        cmd = "help"
        command_candidates = recognized_commands.keys()
    #end if
    if cmd != None :
        sys.stderr.write \
          (
                "Usage:\n\n\t%s %s %s\n\n%s.\n"
            %
                (
                    sys.argv[0],
                    cmd,
                    recognized_commands[cmd]["help_usage"],
                    recognized_commands[cmd]["help_descr"],
                )
          )
    #end if
    if command_candidates != None :
        if len(command_candidates) != 0 :
            sys.stderr.write \
              (
                    "\nValid commands%(matching)s are: %(commands)s.\n"
                %
                    {
                        "matching" :
                            ["", " matching \"%s\"" % command_match][command_match != None],
                        "commands" : ", ".join(sorted(command_candidates)),
                    }
              )
        else :
            sys.stderr.write("No commands matching \"%s\".\n" % command_match)
        #end if
    #end if
#end cmd_help

def cmd_solve(args, opts) :
    numbers = tuple(int(n) for n in args)
    target = numbers[-1]
    numbers = numbers[:-1]

    class AnswerCollector :
        nr_answers = 0

        @classmethod
        def another_answer(self, answer) :
            self.nr_answers += 1
            sys.stdout.write("%d: %s\n" % (self.nr_answers, answer))
        #end another_answer

        @classmethod
        def no_more_answers(self) :
            if self.nr_answers == 0 :
                sys.stdout.write("No answers found\n")
            #end if
        #end no_more_answers

    #end AnswerCollector

#begin cmd_solve
    solve(numbers, target, AnswerCollector.another_answer)
    AnswerCollector.no_more_answers()
#end cmd_solve

class AnswerCounter :

    def __init__(self) :
        self.nr_answers = 0
    #end __init__

    def another_answer(self, answer) :
        self.nr_answers += 1
    #end another_answer

#end AnswerCounter

def cmd_combinations(args, opts) :
    n, target = tuple(int(n) for n in args)
    lo, hi = 1, 9
    arg = opts.get("range")
    if arg != None :
        lo, hi = parse_range_arg(arg, lo, hi)
    #end if
    min_solutions = 0
    max_solutions = infinity
    arg = opts.get("solutions")
    if arg != None :
        min_solutions, max_solutions = parse_range_arg(arg, min_solutions, max_solutions)
    #end if
    for c in number_combinations(n, lo, hi) :
        counter = AnswerCounter()
        solve(c, target, counter.another_answer)
        if counter.nr_answers >= min_solutions and counter.nr_answers <= max_solutions :
            sys.stdout.write("%s => %d\n" % (repr(c), counter.nr_answers))
        #end if
    #end for
#end cmd_combinations

def cmd_counts(args, opts) :
    numbers = tuple(int(n) for n in args)
    min_total = 1
    max_total = largest_total(numbers)
    arg = opts.get("totals")
    if arg != None :
        min_total, max_total = parse_range_arg(arg, min_total, max_total)
    #end if
    min_solutions = 0
    max_solutions = infinity
    arg = opts.get("solutions")
    if arg != None :
        min_solutions, max_solutions = parse_range_arg(arg, min_solutions, max_solutions)
    #end if
    for target in range(min_total, max_total + 1) :
        counter = AnswerCounter()
        solve(numbers, target, counter.another_answer)
        if counter.nr_answers >= min_solutions and counter.nr_answers <= max_solutions :
            sys.stdout.write("%d => %d\n" % (target, counter.nr_answers))
        #end if
    #end for
#end cmd_counts

def cmd_coverage(args, opts) :
    numbers = tuple(int(n) for n in args)
    targets = iter(range(1, largest_total(numbers) + 1))
    prev_achieved = None
    this_achieved = None
    found_something = False
    while True :
        target = next(targets, None)
        if target != None :
            counter = AnswerCounter()
            solve(numbers, target, counter.another_answer)
            solvable = counter.nr_answers != 0
        else :
            solvable = False
        #end if
        if solvable :
            if prev_achieved == None :
                prev_achieved = target
                if found_something :
                    sys.stdout.write(", ")
                #end if
            #end if
            this_achieved = target
            found_something = True
        else :
            if this_achieved != None :
                if this_achieved > prev_achieved :
                    sys.stdout.write("%d..%d" % (prev_achieved, this_achieved))
                else :
                    sys.stdout.write("%d" % this_achieved)
                #end if
                sys.stdout.flush()
            #end if
            prev_achieved = None
            this_achieved = None
        #end if
        if target == None :
            break
    #end while
    if not found_something :
        sys.stdout.write("None")
    #end if
    sys.stdout.write("\n")
#end cmd_coverage

def cmd_satisfies_all(args, opts) :
    nrnums = int(args[0])
    min_total, max_total = parse_range_arg(opts["totals"])
    assert min_total != None and max_total != None, "need to explicitly specify --totals range"
    lo, hi = 1, 9
    arg = opts.get("range")
    if arg != None :
        lo, hi = parse_range_arg(arg, lo, hi)
    #end if
    for c in number_combinations(nrnums, lo, hi) :
        total_try = iter(range(min_total, max_total + 1))
        while True :
            target = next(total_try, None)
            if target == None :
                satisfies = True
                break
            #end if
            counter = AnswerCounter()
            solve(c, target, counter.another_answer)
            if counter.nr_answers == 0 :
                satisfies = False
                break
            #end if
        #end while
        if satisfies :
            sys.stdout.write("%s\n" % repr(c))
        #end if
    #end for
#end cmd_satisfies_all

recognized_commands = \
  {
# key is command name, value is dictionary with following fields:
#     args -- nr required positional args, or tuple of min and max nr required positional args
#     opts -- tuple of long option names. If a name ends in an equal sign, then it takes a value.
#     multivalued -- optional tuple of option keywords which can occur multiple times
#     required -- optional tuple of option keywords which must be present
#     help_usage -- used to construct a usage string when giving help for the command.
#     help_descr -- explanatory text shown when giving help for the command.
#     action -- the function to invoke to actually perform the command.

    "help" :
      {
        "args" : (0, 1),
        "opts" : (),
        "action" : cmd_help,
        "help_usage" : "[cmd]",
        "help_descr" : "gives help about the specified command",
      },

    "solve" :
      {
        "args" : (3, infinity),
        "opts" : (),
        "action" : cmd_solve,
        "help_usage" : "num1 num2... total",
        "help_descr" :
            "tries to find expressions using the num arguments that evaluate to total",
      },

    "combinations" :
      {
        "args" : 2,
        "opts" : ("range=", "solutions="),
        "action" : cmd_combinations,
        "help_usage" : "[--range=lo..hi] [--solutions=min..max] nrnums target",
        "help_descr" :
            "returns counts of expressions containing the specified number of numbers"
            " from the specified range (default 1..9) evaluating to the specified target."
            " Only reports a count of solutions if it is within [min, max] (default 0..∞)",
      },

    "counts" :
      {
        "args" : (2, infinity),
        "opts" : ("solutions=", "totals="),
        "action" : cmd_counts,
        "help_usage" : "[--solutions=smin..smax] [--totals=tmin..tmax] num1 num2...",
        "help_descr" :
            "returns counts of expressions made up of the specified numbers that"
            " evaluate to each possible total in the specified range."
            " Only reports a count of solutions if it is within [smin, smax] (default 0..∞)",
      },

    "coverage" :
      {
        "args" : (2, infinity),
        "opts" : (),
        "action" : cmd_coverage,
        "help_usage" : "num1 num2...",
        "help_descr" :
            "reports all totals achievable with expressions formed from the specified numbers",
      },

    "satisfies_all" :
      {
        "args" : (1),
        "opts" : ("range=", "totals="),
        "required" : ("totals",),
        "action" : cmd_satisfies_all,
        "help_usage" : "[--range=lo..hi] --totals=tmin..tmax nrnums",
        "help_descr" :
            "tries to find combinations of the specified number of numbers from"
            " the specified range (default 1..9) that can form expressions"
            " evaluating to every total in the range tmin..tmax",
      },

  } # recognized_commands

#+
# Mainline
#-

def mainline() :
    if len(sys.argv) < 2 :
        raise getopt.GetoptError("need at least one arg, the cmd to execute")
    #end if
    cmd = sys.argv[1]
    cmd_entry = recognized_commands.get(cmd)
    if cmd_entry == None :
        raise getopt.GetoptError("unrecognized command %s" % repr(cmd))
    #end if
    (opts_list, args) = getopt.gnu_getopt \
      (
        sys.argv[2:],
        "",
        cmd_entry["opts"]
      )
    if type(cmd_entry["args"]) == tuple :
        if (
                len(args) < cmd_entry["args"][0]
            or
                len(args) > cmd_entry["args"][1]
        ) :
            if cmd_entry["args"][1] < infinity :
                raise getopt.GetoptError \
                  (
                    "%s command needs %u..%u args" % ((cmd,) + cmd_entry["args"])
                  )
            else :
                raise getopt.GetoptError \
                  (
                    "%s command needs at least %u args" % ((cmd, cmd_entry["args"][0]))
                  )
            #end if
        #end if
    else :
        if len(args) != cmd_entry["args"] :
            raise getopt.GetoptError \
              (
                "%s command needs exactly %u args" % (cmd, cmd_entry["args"])
              )
        #end if
    #end if
    opts = {}
    multi_opts = frozenset(cmd_entry.get("multivalued", ()))
    for keyword, value in opts_list :
        if keyword[:2] == "--" :
            keyword = keyword[2:]
            if keyword in multi_opts :
                values = opts.get(keyword, [])
                values.append(value)
                opts[keyword] = values
            else :
                opts[keyword] = value
            #end if
        #end if
    #end for
    required_opts = cmd_entry.get("required")
    if required_opts != None :
        missing = set(required_opts) - set(opts.keys())
        if len(missing) != 0 :
            raise getopt.GetoptError \
              (
                "%s command needs option(s) %s" % (cmd, ",".join(tuple(missing)))
              )
        #end if
    #end if
    cmd_entry["action"](args, opts) # can raise exceptions
#end mainline

mainline()
